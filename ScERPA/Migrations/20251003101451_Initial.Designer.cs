// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScERPA.Data;

#nullable disable

namespace ScERPA.Migrations
{
    [DbContext(typeof(ScERPAContext))]
    [Migration("20251003101451_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConfigurazioneTenant", b =>
                {
                    b.Property<int>("ConfigurazioniId")
                        .HasColumnType("int");

                    b.Property<int>("ListaTenantId")
                        .HasColumnType("int");

                    b.HasKey("ConfigurazioniId", "ListaTenantId");

                    b.HasIndex("ListaTenantId");

                    b.ToTable("ConfigurazioneTenant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Xml")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Consumer",
                            NormalizedName = "CONSUMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ScERPA.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit");

                    b.Property<string>("CodiceFiscale")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Matricola")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ScERPA.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Ordinale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Aree");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Anpr",
                            Ordinale = 1
                        });
                });

            modelBuilder.Entity("ScERPA.Models.Chiamata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ambiente")
                        .HasColumnType("int");

                    b.Property<int?>("CodiceRisposta")
                        .HasColumnType("int");

                    b.Property<int>("FinalitaId")
                        .HasColumnType("int");

                    b.Property<string>("OperationGUID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurpouseID")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampCreazioneRichiesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimestampInvocazioneRichiesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimestampRispostaRichiesta")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FinalitaId");

                    b.HasIndex("PurpouseID");

                    b.HasIndex("TenantId");

                    b.ToTable("Chiamate");
                });

            modelBuilder.Entity("ScERPA.Models.Configurazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ambiente")
                        .HasColumnType("int");

                    b.Property<string>("ApiManagerClientId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ApiManagerClientSecret")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ApiManagerOauthEndpoint")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Configurazioni");
                });

            modelBuilder.Entity("ScERPA.Models.ElementoRichiestaMassiva", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CodiceRisposta")
                        .HasColumnType("int");

                    b.Property<string>("IdAccodamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasMaxLength(32000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Output")
                        .HasMaxLength(32000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RichiestaMassivaId")
                        .HasColumnType("int");

                    b.Property<int>("Tentativo")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampCreazioneRichiesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampUltimaElaborazione")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RichiestaMassivaId");

                    b.ToTable("ElementiRichiesteMassive");
                });

            modelBuilder.Entity("ScERPA.Models.Finalita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ambiente")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataAl")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDal")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("IntervalloTempoChiamate")
                        .HasColumnType("int");

                    b.Property<int>("MaxChiamate")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("UnitaTempoChiamate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServizioId");

                    b.HasIndex("TenantId");

                    b.ToTable("ListaFinalita");
                });

            modelBuilder.Entity("ScERPA.Models.IndirizzoChiamata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ambiente")
                        .HasColumnType("int");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServizioId");

                    b.HasIndex("TenantId");

                    b.ToTable("IndirizziChiamata");
                });

            modelBuilder.Entity("ScERPA.Models.Purpouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAl")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDal")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinalitaId")
                        .HasColumnType("int");

                    b.Property<string>("Valore")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("FinalitaId");

                    b.ToTable("Purpouses");
                });

            modelBuilder.Entity("ScERPA.Models.RichiestaMassiva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ambiente")
                        .HasColumnType("int");

                    b.Property<int>("FinalitaId")
                        .HasColumnType("int");

                    b.Property<string>("IdAccodamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stato")
                        .HasColumnType("int");

                    b.Property<int>("TenantId")
                        .HasMaxLength(500)
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampCreazioneRichiesta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimestampUltimaElaborazione")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FinalitaId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserID");

                    b.ToTable("RichiesteMassive");
                });

            modelBuilder.Entity("ScERPA.Models.Servizio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit");

                    b.Property<string>("Cod")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SezioneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("SezioneId");

                    b.ToTable("Servizi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C006",
                            Descrizione = "Verifica dichiarazione cittadinanza italiana",
                            Nome = "VerificaCittadinanzaItaliana",
                            SezioneId = 1
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C015",
                            Descrizione = "Accertamento generalità",
                            Nome = "AccertamentoGeneralita",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C016",
                            Descrizione = "Accertamento dichiarazione di decesso",
                            Nome = "AccertamentoDichDecesso",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 4,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C018",
                            Descrizione = "Accertamento cittadinanza",
                            Nome = "AccertamentoCittadinanza",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 5,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C019",
                            Descrizione = "Accertamento esistenza in vita",
                            Nome = "AccertamentoEsistenzaVita",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 6,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C020",
                            Descrizione = "Accertamento residenza",
                            Nome = "AccertamentoResidenza",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 7,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C021",
                            Descrizione = "Accertamento stato di famiglia",
                            Nome = "AccertamentoStatoDiFamiglia",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 8,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C023",
                            Descrizione = "Accertamento vedovanza",
                            Nome = "AccertamentoVedovanza",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 9,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C024",
                            Descrizione = "Accertamento paternità",
                            Nome = "AccertamentoPaternita",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 10,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C025",
                            Descrizione = "Accertamento maternità",
                            Nome = "AccertamentoMaternita",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 11,
                            AreaId = 1,
                            Attivo = true,
                            Cod = "C030",
                            Descrizione = "Accertamento identificativo unico nazionale",
                            Nome = "AccertamentoIdentificativoUnicoNazionale",
                            SezioneId = 2
                        },
                        new
                        {
                            Id = 12,
                            AreaId = 1,
                            Attivo = false,
                            Cod = "C020",
                            Descrizione = "Accertamento residenza massivo",
                            Nome = "AccertamentoResidenzaMassivo",
                            SezioneId = 3
                        });
                });

            modelBuilder.Entity("ScERPA.Models.Sezione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Ordinale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Sezioni");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AreaId = 1,
                            Nome = "Verifica",
                            Ordinale = 1
                        },
                        new
                        {
                            Id = 2,
                            AreaId = 1,
                            Nome = "Accertamento",
                            Ordinale = 2
                        },
                        new
                        {
                            Id = 3,
                            AreaId = 1,
                            Nome = "Accertamento Massivo",
                            Ordinale = 3
                        });
                });

            modelBuilder.Entity("ScERPA.Models.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("ListaTenant");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Logo = "/Images/logo_rer.png",
                            Nome = "Giunta",
                            Parent = "Giunta Regione Emilia-Romagna",
                            Url = "https://www.regione.emilia-romagna.it"
                        },
                        new
                        {
                            Id = 2,
                            Logo = "/Images/logo_rer.png",
                            Nome = "Assemblea",
                            Parent = "Assemblea Legislativa Regione Emilia-Romagna",
                            Url = "https://www.assemblea.emr.it/"
                        },
                        new
                        {
                            Id = 3,
                            Logo = "/Images/Logo-ProCiv-ER.jpg",
                            Nome = "Agenzia di Protezione Civile",
                            Parent = "Agenzia di Protezione Civile",
                            Url = "https://protezionecivile.regione.emilia-romagna.it/"
                        },
                        new
                        {
                            Id = 4,
                            Logo = "/Images/logo_agrea.png",
                            Nome = "AGREA",
                            Parent = "AGREA",
                            Url = "https://agrea.regione.emilia-romagna.it/"
                        },
                        new
                        {
                            Id = 5,
                            Logo = "/Images/logo_intercenter.png",
                            Nome = "INTERCENTER",
                            Parent = "INTERCENTER",
                            Url = "https://intercenter.regione.emilia-romagna.it/"
                        },
                        new
                        {
                            Id = 6,
                            Logo = "/Images/logo_arl.png",
                            Nome = "Agenzia per il Lavoro",
                            Parent = "Agenzia per il Lavoro",
                            Url = "https://www.agenzialavoro.emr.it/"
                        });
                });

            modelBuilder.Entity("UtentiFinalita", b =>
                {
                    b.Property<string>("UtenteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FinalitaId")
                        .HasColumnType("int");

                    b.HasKey("UtenteId", "FinalitaId");

                    b.HasIndex("FinalitaId");

                    b.ToTable("UtentiFinalita");
                });

            modelBuilder.Entity("UtentiTenant", b =>
                {
                    b.Property<string>("UtenteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("UtenteId", "TenantId");

                    b.HasIndex("TenantId");

                    b.ToTable("UtentiTenant");
                });

            modelBuilder.Entity("ConfigurazioneTenant", b =>
                {
                    b.HasOne("ScERPA.Models.Configurazione", null)
                        .WithMany()
                        .HasForeignKey("ConfigurazioniId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.Tenant", null)
                        .WithMany()
                        .HasForeignKey("ListaTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScERPA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScERPA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScERPA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScERPA.Models.Chiamata", b =>
                {
                    b.HasOne("ScERPA.Models.Finalita", "Finalita")
                        .WithMany()
                        .HasForeignKey("FinalitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.Purpouse", "Purpouse")
                        .WithMany()
                        .HasForeignKey("PurpouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Finalita");

                    b.Navigation("Purpouse");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ScERPA.Models.ElementoRichiestaMassiva", b =>
                {
                    b.HasOne("ScERPA.Models.RichiestaMassiva", "Richiesta")
                        .WithMany("ListaElementiRichiestaMassiva")
                        .HasForeignKey("RichiestaMassivaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Richiesta");
                });

            modelBuilder.Entity("ScERPA.Models.Finalita", b =>
                {
                    b.HasOne("ScERPA.Models.Servizio", "Servizio")
                        .WithMany("ListaFinalita")
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Servizio");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ScERPA.Models.IndirizzoChiamata", b =>
                {
                    b.HasOne("ScERPA.Models.Servizio", "Servizio")
                        .WithMany("IndirizziChiamata")
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");

                    b.Navigation("Servizio");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ScERPA.Models.Purpouse", b =>
                {
                    b.HasOne("ScERPA.Models.Finalita", "Finalita")
                        .WithMany("ListaPurpouse")
                        .HasForeignKey("FinalitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Finalita");
                });

            modelBuilder.Entity("ScERPA.Models.RichiestaMassiva", b =>
                {
                    b.HasOne("ScERPA.Models.Finalita", "Finalita")
                        .WithMany()
                        .HasForeignKey("FinalitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Finalita");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScERPA.Models.Servizio", b =>
                {
                    b.HasOne("ScERPA.Models.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.Sezione", "Sezione")
                        .WithMany()
                        .HasForeignKey("SezioneId");

                    b.Navigation("Area");

                    b.Navigation("Sezione");
                });

            modelBuilder.Entity("ScERPA.Models.Sezione", b =>
                {
                    b.HasOne("ScERPA.Models.Area", "Area")
                        .WithMany("Sezioni")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("UtentiFinalita", b =>
                {
                    b.HasOne("ScERPA.Models.Finalita", null)
                        .WithMany()
                        .HasForeignKey("FinalitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UtentiTenant", b =>
                {
                    b.HasOne("ScERPA.Models.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScERPA.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScERPA.Models.Area", b =>
                {
                    b.Navigation("Sezioni");
                });

            modelBuilder.Entity("ScERPA.Models.Finalita", b =>
                {
                    b.Navigation("ListaPurpouse");
                });

            modelBuilder.Entity("ScERPA.Models.RichiestaMassiva", b =>
                {
                    b.Navigation("ListaElementiRichiestaMassiva");
                });

            modelBuilder.Entity("ScERPA.Models.Servizio", b =>
                {
                    b.Navigation("IndirizziChiamata");

                    b.Navigation("ListaFinalita");
                });
#pragma warning restore 612, 618
        }
    }
}
